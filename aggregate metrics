-- Remove all existing data from array_metrics table
DELETE FROM array_metrics;

-- Create table to store user metrics aggregated by month
CREATE TABLE array_metrics(
    user_id NUMERIC,
    month_start DATE,
    metric_name TEXT,
    metric_array REAL[],
    PRIMARY KEY(user_id, month_start, metric_name)
);

-- Aggregate daily counts of site hits per user for a specific date (2023-01-04)
WITH daily_aggregate AS (
    SELECT 
        user_id,
        COUNT(1) AS num_site_hits,            -- total site hits per user on that date
        DATE(event_time) AS date               -- date of event (just to group by day)
    FROM events 
    WHERE DATE(event_time) = DATE('2023-01-04') -- filter events for this day
      AND user_id IS NOT NULL                    -- exclude null user_ids
    GROUP BY user_id, DATE(event_time)
),

-- Get existing metric arrays for the previous day (2023-01-03)
yesterday_array AS (
    SELECT *
    FROM array_metrics
    WHERE month_start = DATE('2023-01-03')       -- previous day metrics
)

-- Insert or update array_metrics with today's aggregated data
INSERT INTO array_metrics (user_id, month_start, metric_name, metric_array)
SELECT 
    COALESCE(da.user_id, ya.user_id) AS user_id,                      -- get user_id from today's or yesterday's data
    COALESCE(ya.month_start, DATE_TRUNC('month', da.date)) AS month_start,  -- use yesterday's month_start or truncate today's date to month
    'site_hits' AS metric_name,                                       -- metric type label
    CASE 
        WHEN ya.metric_array IS NOT NULL THEN 
            -- If there is an existing metric array from yesterday, append today's site hit count
            ya.metric_array || COALESCE(da.num_site_hits, 0)
        ELSE 
            -- If no existing array, create zero-filled array for previous days + today's count
            ARRAY_FILL(0, ARRAY[
                EXTRACT(day FROM da.date)::int - 1   -- number of zero elements equals days before today in the month
            ]) || ARRAY[COALESCE(da.num_site_hits, 0)]  -- append today's count at the end
    END AS metric_array
FROM daily_aggregate da
FULL OUTER JOIN yesterday_array ya 
    ON da.user_id = ya.user_id                  -- join on user_id to combine today's and yesterday's data

-- Handle conflicts on primary key to update existing rows instead of inserting duplicates
ON CONFLICT (user_id, month_start, metric_name)
DO UPDATE 
-- 'excluded' refers to the new row proposed for insertion that caused the conflict
SET metric_array = EXCLUDED.metric_array;       -- update the existing row's metric_array with new combined array
